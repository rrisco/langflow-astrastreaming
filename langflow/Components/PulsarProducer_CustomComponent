
import pulsar
from langflow.custom import Component
from langflow.io import MessageTextInput, Output
from langflow.schema import Data
from langflow.schema.message import Message
from dotenv import load_dotenv


class CustomComponent(Component):
    load_dotenv()  # take environment variables from .env

    display_name = "Pulsar Producer"
    description = "Create a Pulsar producer and publish data."
    documentation: str = "http://docs.langflow.org/components/custom"
    icon = "AstraDB"
    name = "Pulsar Producer"

    inputs = [
        SecretStrInput(
            name="pulsar_service_url",
            display_name="Pulsar Service URL",
            info="URL of Pulsar broker.",
            advanced=False,
        ),
        SecretStrInput(
            name="pulsar_token",
            display_name="Pulsar Security Token",
            info="Secure token for accesing Pulsar service.",
            advanced=False,
        ),
        StrInput(
            name="tenant_name",
            display_name="Tenant Name",
            advanced=False,
            info="Your tenant name must start with a lowercase alphabetic character. It can only contain lowercase alphanumeric characters, and hyphens (kebab-case).",
        ),
        StrInput(
            name="namespace",
            display_name="Namespace",
            advanced=False,
            info="Pulsar namespaces are logical groupings of topics.",
        ),
        StrInput(
            name="topicName",
            display_name="Topic",
            advanced=False,
            info="Topics provide a way to group messages matching certain criteria.",
        ),
        MultilineInput(
            name="input_value",
            display_name="Pulsar message",
            info="JSON to be passed as message to the topic.",
        ),
    ]
    
    outputs = [
        Output(display_name="Output", name="output", method="build_output"),
    ]

    

    def build_output(self) -> Message:
        topic = "persistent://{0}/{1}/{2}".format(self.tenant_name, self.namespace, self.topicName)

        client = pulsar.Client(self.pulsar_service_url, authentication = pulsar.AuthenticationToken(self.pulsar_token))
        
        # Extract usage metadata from received string (Json) 
        metadata = json.loads(self.input_value)
        
        # create-producer[]
        producer = client.create_producer(topic)
        
        # produce-message[]
        producer.send(self.input_value.encode('utf-8'))
        
        # clean-up[]
        client.close()
        
        output = json.dumps(metadata)
        self.status = output

        return output
