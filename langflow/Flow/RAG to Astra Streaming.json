{"id":"364b9120-06f3-49ba-8af4-87777b83d10d","data":{"nodes":[{"data":{"description":"Get chat inputs from the Playground.","display_name":"Chat Input","id":"ChatInput-azS66","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Get chat inputs from the Playground.","display_name":"Chat Input","documentation":"","edited":false,"field_order":["input_value","should_store_message","sender","sender_name","session_id","files"],"frozen":false,"icon":"ChatInput","output_types":[],"outputs":[{"cache":true,"display_name":"Message","method":"message_response","name":"message","selected":"Message","types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n"},"files":{"advanced":true,"display_name":"Files","dynamic":false,"fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx","jpg","jpeg","png","bmp","image"],"file_path":"","info":"Files to be sent with the message.","list":true,"name":"files","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"file","value":""},"input_value":{"advanced":false,"display_name":"Text","dynamic":false,"info":"Message to be passed as input.","input_types":["Message"],"list":false,"load_from_db":false,"multiline":true,"name":"input_value","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"cuales son las fallas de la ley"},"sender":{"advanced":true,"display_name":"Sender Type","dynamic":false,"info":"Type of sender.","name":"sender","options":["Machine","User"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"User"},"sender_name":{"advanced":true,"display_name":"Sender Name","dynamic":false,"info":"Name of the sender.","input_types":["Message"],"list":false,"load_from_db":false,"name":"sender_name","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"User"},"session_id":{"advanced":true,"display_name":"Session ID","dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","input_types":["Message"],"list":false,"load_from_db":false,"name":"session_id","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"should_store_message":{"advanced":true,"display_name":"Store Messages","dynamic":false,"info":"Store the message in the history.","list":false,"name":"should_store_message","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"bool","value":true}},"lf_version":"1.0.18"},"type":"ChatInput"},"dragging":false,"height":301,"id":"ChatInput-azS66","position":{"x":614.2923151461005,"y":785.4313115001837},"positionAbsolute":{"x":614.2923151461005,"y":785.4313115001837},"selected":false,"type":"genericNode","width":384},{"data":{"description":"Implementation of Vector Store using Astra DB with search capabilities","display_name":"Astra DB","edited":false,"id":"AstraVectorStoreComponent-owRb1","node":{"base_classes":["Data","Retriever"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Implementation of Vector Store using Astra DB with search capabilities","display_name":"Astra DB","documentation":"https://python.langchain.com/docs/integrations/vectorstores/astradb","edited":false,"field_order":["collection_name","token","api_endpoint","search_input","ingest_data","namespace","metric","batch_size","bulk_insert_batch_concurrency","bulk_insert_overwrite_concurrency","bulk_delete_concurrency","setup_mode","pre_delete_collection","metadata_indexing_include","embedding","metadata_indexing_exclude","collection_indexing_policy","number_of_results","search_type","search_score_threshold","search_filter"],"frozen":false,"icon":"AstraDB","output_types":[],"outputs":[{"cache":true,"display_name":"Retriever","method":"build_base_retriever","name":"base_retriever","selected":"Retriever","types":["Retriever"],"value":"__UNDEFINED__"},{"cache":true,"display_name":"Search Results","method":"search_documents","name":"search_results","selected":"Data","types":["Data"],"value":"__UNDEFINED__"},{"cache":true,"display_name":"Vector Store","method":"cast_vector_store","name":"vector_store","selected":"VectorStore","types":["VectorStore"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","api_endpoint":{"advanced":false,"display_name":"API Endpoint","dynamic":false,"info":"API endpoint URL for the Astra DB service.","input_types":["Message"],"load_from_db":true,"name":"api_endpoint","password":true,"placeholder":"","required":true,"show":true,"title_case":false,"type":"str","value":""},"batch_size":{"advanced":true,"display_name":"Batch Size","dynamic":false,"info":"Optional number of data to process in a single batch.","list":false,"name":"batch_size","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":""},"bulk_delete_concurrency":{"advanced":true,"display_name":"Bulk Delete Concurrency","dynamic":false,"info":"Optional concurrency level for bulk delete operations.","list":false,"name":"bulk_delete_concurrency","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":""},"bulk_insert_batch_concurrency":{"advanced":true,"display_name":"Bulk Insert Batch Concurrency","dynamic":false,"info":"Optional concurrency level for bulk insert operations.","list":false,"name":"bulk_insert_batch_concurrency","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":""},"bulk_insert_overwrite_concurrency":{"advanced":true,"display_name":"Bulk Insert Overwrite Concurrency","dynamic":false,"info":"Optional concurrency level for bulk insert operations that overwrite existing data.","list":false,"name":"bulk_insert_overwrite_concurrency","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":""},"code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from loguru import logger\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.helpers import docs_to_data\nfrom langflow.inputs import DictInput, FloatInput\nfrom langflow.io import (\n    BoolInput,\n    DataInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    MultilineInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\n\n\nclass AstraVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Implementation of Vector Store using Astra DB with search capabilities\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/vectorstores/astradb\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"search_input\",\n            display_name=\"Search Input\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        StrInput(\n            name=\"namespace\",\n            display_name=\"Namespace\",\n            info=\"Optional namespace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"metric\",\n            display_name=\"Metric\",\n            info=\"Optional distance metric for vector comparisons in the vector store.\",\n            options=[\"cosine\", \"dot_product\", \"euclidean\"],\n            advanced=True,\n        ),\n        IntInput(\n            name=\"batch_size\",\n            display_name=\"Batch Size\",\n            info=\"Optional number of data to process in a single batch.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_batch_concurrency\",\n            display_name=\"Bulk Insert Batch Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_overwrite_concurrency\",\n            display_name=\"Bulk Insert Overwrite Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations that overwrite existing data.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_delete_concurrency\",\n            display_name=\"Bulk Delete Concurrency\",\n            info=\"Optional concurrency level for bulk delete operations.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"setup_mode\",\n            display_name=\"Setup Mode\",\n            info=\"Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.\",\n            options=[\"Sync\", \"Async\", \"Off\"],\n            advanced=True,\n            value=\"Sync\",\n        ),\n        BoolInput(\n            name=\"pre_delete_collection\",\n            display_name=\"Pre Delete Collection\",\n            info=\"Boolean flag to determine whether to delete the collection before creating a new one.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"metadata_indexing_include\",\n            display_name=\"Metadata Indexing Include\",\n            info=\"Optional list of metadata fields to include in the indexing.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"embedding\",\n            display_name=\"Embedding or Astra Vectorize\",\n            input_types=[\"Embeddings\", \"dict\"],\n            info=\"Allows either an embedding model or an Astra Vectorize configuration.\",  # TODO: This should be optional, but need to refactor langchain-astradb first.\n        ),\n        StrInput(\n            name=\"metadata_indexing_exclude\",\n            display_name=\"Metadata Indexing Exclude\",\n            info=\"Optional list of metadata fields to exclude from the indexing.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"collection_indexing_policy\",\n            display_name=\"Collection Indexing Policy\",\n            info=\"Optional dictionary defining the indexing policy for the collection.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self):\n        try:\n            from langchain_astradb import AstraDBVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError:\n            raise ImportError(\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n\n        try:\n            if not self.setup_mode:\n                self.setup_mode = self._inputs[\"setup_mode\"].options[0]\n\n            setup_mode_value = SetupMode[self.setup_mode.upper()]\n        except KeyError:\n            raise ValueError(f\"Invalid setup mode: {self.setup_mode}\")\n\n        if not isinstance(self.embedding, dict):\n            embedding_dict = {\"embedding\": self.embedding}\n        else:\n            from astrapy.info import CollectionVectorServiceOptions\n\n            dict_options = self.embedding.get(\"collection_vector_service_options\", {})\n            dict_options[\"authentication\"] = {\n                k: v for k, v in dict_options.get(\"authentication\", {}).items() if k and v\n            }\n            dict_options[\"parameters\"] = {k: v for k, v in dict_options.get(\"parameters\", {}).items() if k and v}\n            embedding_dict = {\n                \"collection_vector_service_options\": CollectionVectorServiceOptions.from_dict(dict_options)\n            }\n            collection_embedding_api_key = self.embedding.get(\"collection_embedding_api_key\")\n            if collection_embedding_api_key:\n                embedding_dict[\"collection_embedding_api_key\"] = collection_embedding_api_key\n\n        vector_store_kwargs = {\n            **embedding_dict,\n            \"collection_name\": self.collection_name,\n            \"token\": self.token,\n            \"api_endpoint\": self.api_endpoint,\n            \"namespace\": self.namespace or None,\n            \"metric\": self.metric or None,\n            \"batch_size\": self.batch_size or None,\n            \"bulk_insert_batch_concurrency\": self.bulk_insert_batch_concurrency or None,\n            \"bulk_insert_overwrite_concurrency\": self.bulk_insert_overwrite_concurrency or None,\n            \"bulk_delete_concurrency\": self.bulk_delete_concurrency or None,\n            \"setup_mode\": setup_mode_value,\n            \"pre_delete_collection\": self.pre_delete_collection or False,\n        }\n\n        if self.metadata_indexing_include:\n            vector_store_kwargs[\"metadata_indexing_include\"] = self.metadata_indexing_include\n        elif self.metadata_indexing_exclude:\n            vector_store_kwargs[\"metadata_indexing_exclude\"] = self.metadata_indexing_exclude\n        elif self.collection_indexing_policy:\n            vector_store_kwargs[\"collection_indexing_policy\"] = self.collection_indexing_policy\n\n        try:\n            vector_store = AstraDBVectorStore(**vector_store_kwargs)\n        except Exception as e:\n            raise ValueError(f\"Error initializing AstraDBVectorStore: {str(e)}\") from e\n\n        self._add_documents_to_vector_store(vector_store)\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store):\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                raise ValueError(f\"Error adding documents to AstraDBVectorStore: {str(e)}\") from e\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self):\n        if self.search_type == \"Similarity with score threshold\":\n            return \"similarity_score_threshold\"\n        elif self.search_type == \"MMR (Max Marginal Relevance)\":\n            return \"mmr\"\n        else:\n            return \"similarity\"\n\n    def _build_search_args(self):\n        args = {\n            \"k\": self.number_of_results,\n            \"score_threshold\": self.search_score_threshold,\n        }\n\n        if self.search_filter:\n            clean_filter = {k: v for k, v in self.search_filter.items() if k and v}\n            if len(clean_filter) > 0:\n                args[\"filter\"] = clean_filter\n        return args\n\n    def search_documents(self) -> list[Data]:\n        vector_store = self.build_vector_store()\n\n        logger.debug(f\"Search input: {self.search_input}\")\n        logger.debug(f\"Search type: {self.search_type}\")\n        logger.debug(f\"Number of results: {self.number_of_results}\")\n\n        if self.search_input and isinstance(self.search_input, str) and self.search_input.strip():\n            try:\n                search_type = self._map_search_type()\n                search_args = self._build_search_args()\n\n                docs = vector_store.search(query=self.search_input, search_type=search_type, **search_args)\n            except Exception as e:\n                raise ValueError(f\"Error performing search in AstraDBVectorStore: {str(e)}\") from e\n\n            logger.debug(f\"Retrieved documents: {len(docs)}\")\n\n            data = docs_to_data(docs)\n            logger.debug(f\"Converted documents to data: {len(data)}\")\n            self.status = data\n            return data\n        else:\n            logger.debug(\"No search input provided. Skipping search.\")\n            return []\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n"},"collection_indexing_policy":{"advanced":true,"display_name":"Collection Indexing Policy","dynamic":false,"info":"Optional dictionary defining the indexing policy for the collection.","list":false,"load_from_db":false,"name":"collection_indexing_policy","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":""},"collection_name":{"advanced":false,"display_name":"Collection Name","dynamic":false,"info":"The name of the collection within Astra DB where the vectors will be stored.","list":false,"load_from_db":false,"name":"collection_name","placeholder":"","required":true,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"langflow_demo"},"embedding":{"advanced":false,"display_name":"Embedding or Astra Vectorize","dynamic":false,"info":"Allows either an embedding model or an Astra Vectorize configuration.","input_types":["Embeddings","dict"],"list":false,"name":"embedding","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"other","value":""},"ingest_data":{"advanced":false,"display_name":"Ingest Data","dynamic":false,"info":"","input_types":["Data"],"list":true,"name":"ingest_data","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"other","value":""},"metadata_indexing_exclude":{"advanced":true,"display_name":"Metadata Indexing Exclude","dynamic":false,"info":"Optional list of metadata fields to exclude from the indexing.","list":false,"load_from_db":false,"name":"metadata_indexing_exclude","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":""},"metadata_indexing_include":{"advanced":true,"display_name":"Metadata Indexing Include","dynamic":false,"info":"Optional list of metadata fields to include in the indexing.","list":false,"load_from_db":false,"name":"metadata_indexing_include","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":""},"metric":{"advanced":true,"display_name":"Metric","dynamic":false,"info":"Optional distance metric for vector comparisons in the vector store.","name":"metric","options":["cosine","dot_product","euclidean"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":""},"namespace":{"advanced":true,"display_name":"Namespace","dynamic":false,"info":"Optional namespace within Astra DB to use for the collection.","list":false,"load_from_db":false,"name":"namespace","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":""},"number_of_results":{"advanced":true,"display_name":"Number of Results","dynamic":false,"info":"Number of results to return.","list":false,"name":"number_of_results","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":4},"pre_delete_collection":{"advanced":true,"display_name":"Pre Delete Collection","dynamic":false,"info":"Boolean flag to determine whether to delete the collection before creating a new one.","list":false,"name":"pre_delete_collection","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"bool","value":false},"search_filter":{"advanced":true,"display_name":"Search Metadata Filter","dynamic":false,"info":"Optional dictionary of filters to apply to the search query.","list":true,"name":"search_filter","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"type":"dict","value":{}},"search_input":{"advanced":false,"display_name":"Search Input","dynamic":false,"info":"","input_types":["Message"],"list":false,"load_from_db":false,"multiline":true,"name":"search_input","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"search_score_threshold":{"advanced":true,"display_name":"Search Score Threshold","dynamic":false,"info":"Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')","list":false,"name":"search_score_threshold","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"float","value":0},"search_type":{"advanced":true,"display_name":"Search Type","dynamic":false,"info":"Search type to use","name":"search_type","options":["Similarity","Similarity with score threshold","MMR (Max Marginal Relevance)"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"Similarity"},"setup_mode":{"advanced":true,"display_name":"Setup Mode","dynamic":false,"info":"Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.","name":"setup_mode","options":["Sync","Async","Off"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"Sync"},"token":{"advanced":false,"display_name":"Astra DB Application Token","dynamic":false,"info":"Authentication token for accessing Astra DB.","input_types":["Message"],"load_from_db":true,"name":"token","password":true,"placeholder":"","required":true,"show":true,"title_case":false,"type":"str","value":""}},"lf_version":"1.0.18"},"type":"AstraVectorStoreComponent"},"dragging":false,"height":771,"id":"AstraVectorStoreComponent-owRb1","position":{"x":1278.3894926871883,"y":208.82484375625916},"positionAbsolute":{"x":1278.3894926871883,"y":208.82484375625916},"selected":false,"type":"genericNode","width":384},{"data":{"description":"Convert Data into plain text following a specified template.","display_name":"Parse Data","id":"ParseData-CYbo1","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Convert Data into plain text following a specified template.","display_name":"Parse Data","documentation":"","edited":false,"field_order":["data","template","sep"],"frozen":false,"icon":"braces","output_types":[],"outputs":[{"cache":true,"display_name":"Text","method":"parse_data","name":"text","selected":"Message","types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n"},"data":{"advanced":false,"display_name":"Data","dynamic":false,"info":"The data to convert to text.","input_types":["Data"],"list":false,"name":"data","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"other","value":""},"sep":{"advanced":true,"display_name":"Separator","dynamic":false,"info":"","list":false,"load_from_db":false,"name":"sep","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"\n"},"template":{"advanced":false,"display_name":"Template","dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","input_types":["Message"],"list":false,"load_from_db":false,"multiline":true,"name":"template","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""}},"lf_version":"1.0.18"},"type":"ParseData"},"dragging":false,"height":377,"id":"ParseData-CYbo1","position":{"x":1828.5193092878185,"y":429.69878000339213},"positionAbsolute":{"x":1828.5193092878185,"y":429.69878000339213},"selected":false,"type":"genericNode","width":384},{"data":{"description":"Create a prompt template with dynamic variables.","display_name":"Prompt","id":"Prompt-RMzEB","node":{"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"},"context":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"context","display_name":"context","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"question":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"question","display_name":"question","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"template":{"advanced":false,"display_name":"Template","dynamic":false,"info":"","list":false,"load_from_db":false,"name":"template","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"type":"prompt","value":"{context}\n---\n{history}\n\nGiven the context above, answer the question as best as possible. \nConsider also past interactions contained in history\n\nQuestion: {question}\n\nAnswer: "},"history":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"history","display_name":"history","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["context","history","question"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false,"lf_version":"1.0.18"},"type":"Prompt"},"dragging":false,"height":586,"id":"Prompt-RMzEB","position":{"x":2486.0988668404975,"y":496.5120474157301},"positionAbsolute":{"x":2486.0988668404975,"y":496.5120474157301},"selected":false,"type":"genericNode","width":384},{"data":{"description":"Generate embeddings using OpenAI models.","display_name":"OpenAI Embeddings","id":"OpenAIEmbeddings-aTa8O","node":{"base_classes":["Embeddings"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Generate embeddings using OpenAI models.","display_name":"OpenAI Embeddings","documentation":"","edited":false,"field_order":["default_headers","default_query","chunk_size","client","deployment","embedding_ctx_length","max_retries","model","model_kwargs","openai_api_base","openai_api_key","openai_api_type","openai_api_version","openai_organization","openai_proxy","request_timeout","show_progress_bar","skip_empty","tiktoken_model_name","tiktoken_enable","dimensions"],"frozen":false,"icon":"OpenAI","output_types":[],"outputs":[{"cache":true,"display_name":"Embeddings","method":"build_embeddings","name":"embeddings","selected":"Embeddings","types":["Embeddings"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","chunk_size":{"advanced":true,"display_name":"Chunk Size","dynamic":false,"info":"","list":false,"name":"chunk_size","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":1000},"client":{"advanced":true,"display_name":"Client","dynamic":false,"info":"","input_types":["Message"],"list":false,"load_from_db":false,"name":"client","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n"},"default_headers":{"advanced":true,"display_name":"Default Headers","dynamic":false,"info":"Default headers to use for the API request.","list":false,"name":"default_headers","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"type":"dict","value":{}},"default_query":{"advanced":true,"display_name":"Default Query","dynamic":false,"info":"Default query parameters to use for the API request.","list":false,"name":"default_query","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"type":"dict","value":{}},"deployment":{"advanced":true,"display_name":"Deployment","dynamic":false,"info":"","input_types":["Message"],"list":false,"load_from_db":false,"name":"deployment","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"dimensions":{"advanced":true,"display_name":"Dimensions","dynamic":false,"info":"The number of dimensions the resulting output embeddings should have. Only supported by certain models.","list":false,"name":"dimensions","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":""},"embedding_ctx_length":{"advanced":true,"display_name":"Embedding Context Length","dynamic":false,"info":"","list":false,"name":"embedding_ctx_length","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":1536},"max_retries":{"advanced":true,"display_name":"Max Retries","dynamic":false,"info":"","list":false,"name":"max_retries","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":3},"model":{"advanced":false,"display_name":"Model","dynamic":false,"info":"","name":"model","options":["text-embedding-3-small","text-embedding-3-large","text-embedding-ada-002"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"text-embedding-ada-002"},"model_kwargs":{"advanced":true,"display_name":"Model Kwargs","dynamic":false,"info":"","list":false,"name":"model_kwargs","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"type":"dict","value":{}},"openai_api_base":{"advanced":true,"display_name":"OpenAI API Base","dynamic":false,"info":"","input_types":["Message"],"load_from_db":false,"name":"openai_api_base","password":true,"placeholder":"","required":false,"show":true,"title_case":false,"type":"str","value":""},"openai_api_key":{"advanced":false,"display_name":"OpenAI API Key","dynamic":false,"info":"","input_types":["Message"],"load_from_db":true,"name":"openai_api_key","password":true,"placeholder":"","required":false,"show":true,"title_case":false,"type":"str","value":""},"openai_api_type":{"advanced":true,"display_name":"OpenAI API Type","dynamic":false,"info":"","input_types":["Message"],"load_from_db":false,"name":"openai_api_type","password":true,"placeholder":"","required":false,"show":true,"title_case":false,"type":"str","value":""},"openai_api_version":{"advanced":true,"display_name":"OpenAI API Version","dynamic":false,"info":"","input_types":["Message"],"list":false,"load_from_db":false,"name":"openai_api_version","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"openai_organization":{"advanced":true,"display_name":"OpenAI Organization","dynamic":false,"info":"","input_types":["Message"],"list":false,"load_from_db":false,"name":"openai_organization","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"openai_proxy":{"advanced":true,"display_name":"OpenAI Proxy","dynamic":false,"info":"","input_types":["Message"],"list":false,"load_from_db":false,"name":"openai_proxy","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"request_timeout":{"advanced":true,"display_name":"Request Timeout","dynamic":false,"info":"","list":false,"name":"request_timeout","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"float","value":""},"show_progress_bar":{"advanced":true,"display_name":"Show Progress Bar","dynamic":false,"info":"","list":false,"name":"show_progress_bar","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"bool","value":false},"skip_empty":{"advanced":true,"display_name":"Skip Empty","dynamic":false,"info":"","list":false,"name":"skip_empty","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"bool","value":false},"tiktoken_enable":{"advanced":true,"display_name":"TikToken Enable","dynamic":false,"info":"If False, you must have transformers installed.","list":false,"name":"tiktoken_enable","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"bool","value":true},"tiktoken_model_name":{"advanced":true,"display_name":"TikToken Model Name","dynamic":false,"info":"","input_types":["Message"],"list":false,"load_from_db":false,"name":"tiktoken_model_name","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""}},"lf_version":"1.0.18"},"type":"OpenAIEmbeddings"},"dragging":false,"height":387,"id":"OpenAIEmbeddings-aTa8O","position":{"x":622.9800691759976,"y":351.4159459309091},"positionAbsolute":{"x":622.9800691759976,"y":351.4159459309091},"selected":false,"type":"genericNode","width":384},{"id":"Memory-G8h9c","type":"genericNode","position":{"x":1995.8697635011476,"y":-26.127265787085065},"data":{"type":"Memory","node":{"template":{"_type":"Component","memory":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"memory","value":"","display_name":"External Memory","advanced":false,"input_types":["BaseChatMessageHistory"],"dynamic":false,"info":"Retrieve messages from an external memory. If empty, it will use the Langflow tables.","title_case":false,"type":"other","_input_type":"HandleInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain.memory import ConversationBufferMemory\n\nfrom langflow.custom import Component\nfrom langflow.field_typing import BaseChatMemory\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import LCBuiltinChatMemory, get_messages\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Messages (Data)\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n        Output(display_name=\"Memory\", name=\"lc_memory\", method=\"build_lc_memory\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            # langchain memories are supposed to return messages in ascending order\n            if order == \"DESC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        if self.memory:\n            chat_memory = self.memory\n        else:\n            chat_memory = LCBuiltinChatMemory(flow_id=self.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"n_messages":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"n_messages","value":100,"display_name":"Number of Messages","advanced":true,"dynamic":false,"info":"Number of messages to retrieve.","title_case":false,"type":"int","_input_type":"IntInput"},"order":{"trace_as_metadata":true,"options":["Ascending","Descending"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"order","value":"Ascending","display_name":"Order","advanced":true,"dynamic":false,"info":"Order of the messages.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender":{"trace_as_metadata":true,"options":["Machine","User","Machine and User"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"sender","value":"Machine and User","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Filter by sender type.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sender_name","value":"","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Filter by sender name.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"session_id","value":"","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{sender_name}: {text}","display_name":"Template","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Retrieves stored chat messages from Langflow tables or an external memory.","icon":"message-square-more","base_classes":["BaseChatMemory","Data","Message"],"display_name":"Chat Memory","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"messages","display_name":"Messages (Data)","method":"retrieve_messages","value":"__UNDEFINED__","cache":true},{"types":["Message"],"selected":"Message","name":"messages_text","display_name":"Messages (Text)","method":"retrieve_messages_as_text","value":"__UNDEFINED__","cache":true},{"types":["BaseChatMemory"],"selected":"BaseChatMemory","name":"lc_memory","display_name":"Memory","method":"build_lc_memory","value":"__UNDEFINED__","cache":true}],"field_order":["memory","sender","sender_name","n_messages","session_id","order","template"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"Memory-G8h9c"},"selected":false,"width":384,"height":380,"positionAbsolute":{"x":1995.8697635011476,"y":-26.127265787085065},"dragging":false},{"id":"CustomComponent-5ZxLf","type":"genericNode","position":{"x":3104.7411311985275,"y":49.564262938231195},"data":{"type":"OpenAIModel","node":{"template":{"_type":"Component","api_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"name":"api_key","value":"","display_name":"OpenAI API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The OpenAI API Key to use for the OpenAI model.","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"# from langflow.field_typing import Data\r\nfrom langflow.custom import Component\r\nimport operator\r\nfrom functools import reduce\r\n\r\nfrom langflow.field_typing.range_spec import RangeSpec\r\nfrom langchain_openai import ChatOpenAI\r\nfrom langchain_core.messages import AIMessage\r\nfrom pydantic.v1 import SecretStr\r\n\r\nfrom langflow.base.models.model import LCModelComponent\r\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\r\nfrom langflow.field_typing import LanguageModel\r\nfrom langflow.inputs import (\r\n    BoolInput,\r\n    DictInput,\r\n    DropdownInput,\r\n    FloatInput,\r\n    IntInput,\r\n    SecretStrInput,\r\n    StrInput,\r\n)\r\n\r\n\r\nclass OpenAIModelCustomComponent(LCModelComponent):\r\n    display_name = \"OpenAI Custom\"\r\n    description = \"Generates text & metadata using OpenAI LLMs.\"\r\n    icon = \"OpenAI\"\r\n    name = \"OpenAIModel\"\r\n\r\n    inputs = LCModelComponent._base_inputs + [\r\n        IntInput(\r\n            name=\"max_tokens\",\r\n            display_name=\"Max Tokens\",\r\n            advanced=True,\r\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\r\n            range_spec=RangeSpec(min=0, max=128000),\r\n        ),\r\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\r\n        BoolInput(\r\n            name=\"json_mode\",\r\n            display_name=\"JSON Mode\",\r\n            advanced=True,\r\n            info=\"If True, it will output JSON regardless of passing a schema.\",\r\n        ),\r\n        DictInput(\r\n            name=\"output_schema\",\r\n            is_list=True,\r\n            display_name=\"Schema\",\r\n            advanced=True,\r\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"model_name\",\r\n            display_name=\"Model Name\",\r\n            advanced=False,\r\n            options=OPENAI_MODEL_NAMES,\r\n            value=OPENAI_MODEL_NAMES[0],\r\n        ),\r\n        StrInput(\r\n            name=\"openai_api_base\",\r\n            display_name=\"OpenAI API Base\",\r\n            advanced=True,\r\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\r\n        ),\r\n        SecretStrInput(\r\n            name=\"api_key\",\r\n            display_name=\"OpenAI API Key\",\r\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\r\n            advanced=False,\r\n            value=\"OPENAI_API_KEY\",\r\n        ),\r\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\r\n        IntInput(\r\n            name=\"seed\",\r\n            display_name=\"Seed\",\r\n            info=\"The seed controls the reproducibility of the job.\",\r\n            advanced=True,\r\n            value=1,\r\n        ),\r\n    ]\r\n    \r\n    outputs = [\r\n        Output(display_name=\"Text\", name=\"text_output\", method=\"text_response\"),\r\n        Output(display_name=\"Metadata\", name=\"metadata_output\", method=\"metadata_response\"),\r\n        Output(display_name=\"Language Model\", name=\"model_output\", method=\"build_model\"),\r\n    ]\r\n    \r\n    metadata: str | str = \"No metadata available.\"\r\n    \r\n    def _validate_outputs(self):\r\n        # At least these two outputs must be defined\r\n        required_output_methods = [\"text_response\", \"build_model\", \"metadata_response\"]\r\n        output_names = [output.name for output in self.outputs]\r\n        for method_name in required_output_methods:\r\n            if method_name not in output_names:\r\n                raise ValueError(f\"Output with name '{method_name}' must be defined.\")\r\n            elif not hasattr(self, method_name):\r\n                raise ValueError(f\"Method '{method_name}' must be defined.\")\r\n    \r\n\r\n    def metadata_response(self) -> Message:\r\n        self.status = self.metadata\r\n        return json.dumps(self.metadata)\r\n        \r\n    def text_response(self) -> Message:\r\n        input_value = self.input_value\r\n        stream = self.stream\r\n        system_message = self.system_message\r\n        output = self.build_model()\r\n        result = self.get_chat_result(output, stream, input_value, system_message)\r\n        self.status = result\r\n        return result\r\n    \r\n    def build_status_message(self, message: AIMessage):\r\n        \"\"\"\r\n        Builds a status message from an AIMessage object.\r\n\r\n        Args:\r\n            message (AIMessage): The AIMessage object to build the status message from.\r\n\r\n        Returns:\r\n            The status message.\r\n        \"\"\"\r\n        if message.response_metadata:\r\n            # Build a well formatted status message\r\n            content = message.content\r\n            response_metadata = message.response_metadata\r\n            openai_keys = [\"token_usage\", \"model_name\", \"finish_reason\"]\r\n            inner_openai_keys = [\"completion_tokens\", \"prompt_tokens\", \"total_tokens\"]\r\n            anthropic_keys = [\"model\", \"usage\", \"stop_reason\"]\r\n            inner_anthropic_keys = [\"input_tokens\", \"output_tokens\"]\r\n            if all(key in response_metadata for key in openai_keys) and all(\r\n                key in response_metadata[\"token_usage\"] for key in inner_openai_keys\r\n            ):\r\n                token_usage = response_metadata[\"token_usage\"]\r\n                status_message = {\r\n                    \"tokens\": {\r\n                        \"input\": token_usage[\"prompt_tokens\"],\r\n                        \"output\": token_usage[\"completion_tokens\"],\r\n                        \"total\": token_usage[\"total_tokens\"],\r\n                        \"stop_reason\": response_metadata[\"finish_reason\"],\r\n                        \"response\": content,\r\n                    }\r\n                }\r\n                self.metadata = status_message\r\n            elif all(key in response_metadata for key in anthropic_keys) and all(\r\n                key in response_metadata[\"usage\"] for key in inner_anthropic_keys\r\n            ):\r\n                usage = response_metadata[\"usage\"]\r\n                status_message = {\r\n                    \"tokens\": {\r\n                        \"input\": usage[\"input_tokens\"],\r\n                        \"output\": usage[\"output_tokens\"],\r\n                        \"stop_reason\": response_metadata[\"stop_reason\"],\r\n                        \"response\": content,\r\n                    }\r\n                }\r\n                self.metadata = status_message\r\n            else:\r\n                status_message = f\"Response: {content}\"  # type: ignore\r\n                self.metadata = \"Use metadata unavailable\"\r\n        else:\r\n            status_message = f\"Response: {message.content}\"  # type: ignore\r\n            self.metadata = \"Use metadata unavailable\"\r\n        return status_message\r\n\r\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\r\n        # self.output_schema is a list of dictionaries\r\n        # let's convert it to a dictionary\r\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\r\n        openai_api_key = self.api_key\r\n        temperature = self.temperature\r\n        model_name: str = self.model_name\r\n        max_tokens = self.max_tokens\r\n        model_kwargs = self.model_kwargs or {}\r\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\r\n        json_mode = bool(output_schema_dict) or self.json_mode\r\n        seed = self.seed\r\n\r\n        if openai_api_key:\r\n            api_key = SecretStr(openai_api_key)\r\n        else:\r\n            api_key = None\r\n        output = ChatOpenAI(\r\n            max_tokens=max_tokens or None,\r\n            model_kwargs=model_kwargs,\r\n            model=model_name,\r\n            base_url=openai_api_base,\r\n            api_key=api_key,\r\n            temperature=temperature if temperature is not None else 0.1,\r\n            seed=seed,\r\n        )\r\n        if json_mode:\r\n            if output_schema_dict:\r\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\r\n            else:\r\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\r\n\r\n        return output  # type: ignore\r\n\r\n    def _get_exception_message(self, e: Exception):\r\n        \"\"\"\r\n        Get a message from an OpenAI exception.\r\n\r\n        Args:\r\n            exception (Exception): The exception to get the message from.\r\n\r\n        Returns:\r\n            str: The message from the exception.\r\n        \"\"\"\r\n\r\n        try:\r\n            from openai import BadRequestError\r\n        except ImportError:\r\n            return\r\n        if isinstance(e, BadRequestError):\r\n            message = e.body.get(\"message\")  # type: ignore\r\n            if message:\r\n                return message\r\n        return\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageInput"},"json_mode":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"json_mode","value":false,"display_name":"JSON Mode","advanced":true,"dynamic":false,"info":"If True, it will output JSON regardless of passing a schema.","title_case":false,"type":"bool","_input_type":"BoolInput"},"max_tokens":{"trace_as_metadata":true,"range_spec":{"step_type":"float","min":0,"max":128000,"step":0.1},"list":false,"required":false,"placeholder":"","show":true,"name":"max_tokens","value":"","display_name":"Max Tokens","advanced":true,"dynamic":false,"info":"The maximum number of tokens to generate. Set to 0 for unlimited tokens.","title_case":false,"type":"int","_input_type":"IntInput"},"model_kwargs":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"name":"model_kwargs","value":{},"display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict","_input_type":"DictInput"},"model_name":{"trace_as_metadata":true,"options":["gpt-4o-mini","gpt-4o","gpt-4-turbo","gpt-4-turbo-preview","gpt-4","gpt-3.5-turbo","gpt-3.5-turbo-0125"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"model_name","value":"gpt-3.5-turbo","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"DropdownInput","load_from_db":false},"openai_api_base":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"openai_api_base","value":"","display_name":"OpenAI API Base","advanced":true,"dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.","title_case":false,"type":"str","_input_type":"StrInput"},"output_schema":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"name":"output_schema","value":{},"display_name":"Schema","advanced":true,"dynamic":false,"info":"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.","title_case":false,"type":"dict","_input_type":"DictInput"},"seed":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"seed","value":1,"display_name":"Seed","advanced":true,"dynamic":false,"info":"The seed controls the reproducibility of the job.","title_case":false,"type":"int","_input_type":"IntInput"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"stream","value":false,"display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool","_input_type":"BoolInput"},"system_message":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_message","value":"","display_name":"System Message","advanced":true,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"temperature","value":0.1,"display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float","_input_type":"FloatInput"}},"description":"Generates text & metadata using OpenAI LLMs.","icon":"OpenAI","base_classes":["LanguageModel","Message"],"display_name":"OpenAI Model w/Metadata","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true},{"types":["Message"],"selected":"Message","name":"metadata_output","display_name":"Metadata","method":"metadata_response","value":"__UNDEFINED__","cache":true},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","system_message","stream","max_tokens","model_kwargs","json_mode","output_schema","model_name","openai_api_base","api_key","temperature","seed"],"beta":false,"edited":true,"lf_version":"1.0.18"},"id":"CustomComponent-5ZxLf"},"selected":true,"width":384,"height":647,"positionAbsolute":{"x":3104.7411311985275,"y":49.564262938231195},"dragging":false},{"id":"CustomComponent-Ic87d","type":"genericNode","position":{"x":4076.4963949142652,"y":787.7168283290648},"data":{"type":"Pulsar Producer","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"\r\nimport pulsar\r\nfrom langflow.custom import Component\r\nfrom langflow.io import MessageTextInput, Output\r\nfrom langflow.schema import Data\r\nfrom langflow.schema.message import Message\r\nfrom dotenv import load_dotenv\r\n\r\n\r\nclass CustomComponent(Component):\r\n    load_dotenv()  # take environment variables from .env\r\n\r\n    display_name = \"Pulsar Producer\"\r\n    description = \"Create a Pulsar producer and publish data.\"\r\n    documentation: str = \"http://docs.langflow.org/components/custom\"\r\n    icon = \"AstraDB\"\r\n    name = \"Pulsar Producer\"\r\n\r\n    inputs = [\r\n        SecretStrInput(\r\n            name=\"pulsar_service_url\",\r\n            display_name=\"Pulsar Service URL\",\r\n            info=\"URL of Pulsar broker.\",\r\n            advanced=False,\r\n        ),\r\n        SecretStrInput(\r\n            name=\"pulsar_token\",\r\n            display_name=\"Pulsar Security Token\",\r\n            info=\"Secure token for accesing Pulsar service.\",\r\n            advanced=False,\r\n            #value=\"PULSAR_TOKEN\",\r\n        ),\r\n        StrInput(\r\n            name=\"tenant_name\",\r\n            display_name=\"Tenant Name\",\r\n            advanced=False,\r\n            info=\"Your tenant name must start with a lowercase alphabetic character. It can only contain lowercase alphanumeric characters, and hyphens (kebab-case).\",\r\n        ),\r\n        StrInput(\r\n            name=\"namespace\",\r\n            display_name=\"Namespace\",\r\n            advanced=False,\r\n            info=\"Pulsar namespaces are logical groupings of topics.\",\r\n        ),\r\n        StrInput(\r\n            name=\"topicName\",\r\n            display_name=\"Topic\",\r\n            advanced=False,\r\n            info=\"Topics provide a way to group messages matching certain criteria.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"input_value\",\r\n            display_name=\"Pulsar message\",\r\n            info=\"JSON to be passed as message to the topic.\",\r\n        ),\r\n    ]\r\n    \r\n    outputs = [\r\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\r\n    ]\r\n\r\n    \r\n\r\n    def build_output(self) -> Message:\r\n        topic = \"persistent://{0}/{1}/{2}\".format(self.tenant_name, self.namespace, self.topicName)\r\n\r\n        client = pulsar.Client(self.pulsar_service_url, authentication = pulsar.AuthenticationToken(self.pulsar_token))\r\n        \r\n        # Extract usage metadata from received string (Json) \r\n        metadata = json.loads(self.input_value)\r\n        \r\n        # create-producer[]\r\n        producer = client.create_producer(topic)\r\n        \r\n        # produce-message[]\r\n        producer.send(self.input_value.encode('utf-8'))\r\n        \r\n        # clean-up[]\r\n        client.close()\r\n        \r\n        output = json.dumps(metadata)\r\n        self.status = output\r\n\r\n        return output\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Pulsar message","advanced":false,"input_types":["Message"],"dynamic":false,"info":"JSON to be passed as message to the topic.","title_case":false,"type":"str","_input_type":"MultilineInput"},"namespace":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"namespace","value":"streaming-demo","display_name":"Namespace","advanced":false,"dynamic":false,"info":"Pulsar namespaces are logical groupings of topics.","title_case":false,"type":"str","_input_type":"StrInput"},"pulsar_service_url":{"load_from_db":true,"required":false,"placeholder":"","show":true,"name":"pulsar_service_url","value":"","display_name":"Pulsar Service URL","advanced":false,"input_types":["Message"],"dynamic":false,"info":"URL of Pulsar broker.","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"pulsar_token":{"load_from_db":false,"required":false,"placeholder":"","show":true,"name":"pulsar_token","value":"","display_name":"Pulsar Security Token","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Secure token for accesing Pulsar service.","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"tenant_name":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"tenant_name","value":"analytics-test","display_name":"Tenant Name","advanced":false,"dynamic":false,"info":"Your tenant name must start with a lowercase alphabetic character. It can only contain lowercase alphanumeric characters, and hyphens (kebab-case).","title_case":false,"type":"str","_input_type":"StrInput"},"topicName":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"topicName","value":"genai-usage-metadata","display_name":"Topic","advanced":false,"dynamic":false,"info":"Topics provide a way to group messages matching certain criteria.","title_case":false,"type":"str","_input_type":"StrInput"}},"description":"Create a Pulsar producer and publish data.","icon":"AstraDB","base_classes":["Message"],"display_name":"Pulsar Producer","documentation":"http://docs.langflow.org/components/custom","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"output","display_name":"Output","method":"build_output","value":"__UNDEFINED__","cache":true}],"field_order":["pulsar_service_url","pulsar_token","tenant_name","namespace","topicName","input_value"],"beta":false,"edited":true},"id":"CustomComponent-Ic87d"},"selected":false,"width":384,"height":730,"positionAbsolute":{"x":4076.4963949142652,"y":787.7168283290648},"dragging":false},{"id":"ChatOutput-y4wko","type":"genericNode","position":{"x":4592.659419156507,"y":1009.2785958995307},"data":{"type":"ChatOutput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"data_template":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"data_template","value":"{text}","display_name":"Data Template","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as output.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"sender":{"trace_as_metadata":true,"options":["Machine","User"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"sender","value":"Machine","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sender_name","value":"AI","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"session_id","value":"","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"should_store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"should_store_message","value":true,"display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Display a chat message in the Playground.","icon":"ChatOutput","base_classes":["Message"],"display_name":"Chat Output","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","should_store_message","sender","sender_name","session_id","data_template"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"ChatOutput-y4wko"},"selected":false,"width":384,"height":301,"positionAbsolute":{"x":4592.659419156507,"y":1009.2785958995307},"dragging":false},{"id":"TextOutput-OqipT","type":"genericNode","position":{"x":3618.2077316352015,"y":299.72831426116295},"data":{"type":"TextOutput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as output.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Display a text output in the Playground.","icon":"type","base_classes":["Message"],"display_name":"Text Output","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"TextOutput-OqipT"},"selected":false,"width":384,"height":301,"positionAbsolute":{"x":3618.2077316352015,"y":299.72831426116295},"dragging":false},{"id":"CustomComponent-PgMWw","type":"genericNode","position":{"x":3603.2989091059217,"y":896.210752491656},"data":{"type":"Pulsar Message","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"\r\nfrom langflow.custom import Component\r\nfrom langflow.io import MessageTextInput, Output\r\nfrom langflow.schema import Data\r\nfrom langflow.schema.message import Message\r\nimport json\r\n\r\n\r\nclass CustomComponent(Component):\r\n    display_name = \"Pulsar Message\"\r\n    description = \"Creates a JSON message to send.\"\r\n    documentation: str = \"http://docs.langflow.org/components/custom\"\r\n    icon = \"braces\"\r\n    name = \"Pulsar Message\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"llm_response\",\r\n            display_name=\"LLM response\",\r\n            info=\"JSON to be passed as message to the topic.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_question\", \r\n            display_name=\"Question\",\r\n            info=\"Question from the user\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user\", \r\n            display_name=\"User\",\r\n            info=\"User making the question\",\r\n        ),\r\n    ]\r\n    \r\n    outputs = [\r\n        Output(display_name=\"Message\", name=\"text\", method=\"build_output\"),\r\n    ]\r\n\r\n    def build_output(self) -> Message:\r\n        metadata = json.loads(self.llm_response)\r\n        metadata['question'] = self.user_question\r\n        metadata['user'] = self.user\r\n        output = json.dumps(metadata)\r\n        self.status = output\r\n        return output\r\n\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"llm_response":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"llm_response","value":"","display_name":"LLM response","advanced":false,"input_types":["Message"],"dynamic":false,"info":"JSON to be passed as message to the topic.","title_case":false,"type":"str","_input_type":"MultilineInput"},"user":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"user","value":"","display_name":"User","advanced":false,"input_types":["Message"],"dynamic":false,"info":"User making the question","title_case":false,"type":"str","_input_type":"MessageTextInput"},"user_question":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"user_question","value":"","display_name":"Question","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Question from the user","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Creates a JSON message to send.","icon":"braces","base_classes":["Message"],"display_name":"Create Pulsar Message","documentation":"http://docs.langflow.org/components/custom","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Message","method":"build_output","value":"__UNDEFINED__","cache":true}],"field_order":["llm_response","user_question","user"],"beta":false,"edited":true},"id":"CustomComponent-PgMWw"},"selected":false,"width":384,"height":473,"positionAbsolute":{"x":3603.2989091059217,"y":896.210752491656},"dragging":false},{"id":"TextInput-ocdhC","type":"genericNode","position":{"x":611.1250136147326,"y":1127.9665009628404},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["Message"],"display_name":"User","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextInput-ocdhC"},"selected":false,"width":384,"height":301,"positionAbsolute":{"x":611.1250136147326,"y":1127.9665009628404},"dragging":false}],"edges":[{"className":"","data":{"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-azS66","name":"message","output_types":["Message"]},"targetHandle":{"fieldName":"search_input","id":"AstraVectorStoreComponent-owRb1","inputTypes":["Message"],"type":"str"}},"id":"reactflow__edge-ChatInput-azS66{œdataTypeœ:œChatInputœ,œidœ:œChatInput-azS66œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-AstraVectorStoreComponent-owRb1{œfieldNameœ:œsearch_inputœ,œidœ:œAstraVectorStoreComponent-owRb1œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","source":"ChatInput-azS66","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-azS66œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"AstraVectorStoreComponent-owRb1","targetHandle":"{œfieldNameœ:œsearch_inputœ,œidœ:œAstraVectorStoreComponent-owRb1œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"},{"className":"","data":{"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-azS66","name":"message","output_types":["Message"]},"targetHandle":{"fieldName":"question","id":"Prompt-RMzEB","inputTypes":["Message","Text"],"type":"str"}},"id":"reactflow__edge-ChatInput-azS66{œdataTypeœ:œChatInputœ,œidœ:œChatInput-azS66œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-RMzEB{œfieldNameœ:œquestionœ,œidœ:œPrompt-RMzEBœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","source":"ChatInput-azS66","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-azS66œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-RMzEB","targetHandle":"{œfieldNameœ:œquestionœ,œidœ:œPrompt-RMzEBœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"},{"className":"","data":{"sourceHandle":{"dataType":"OpenAIEmbeddings","id":"OpenAIEmbeddings-aTa8O","name":"embeddings","output_types":["Embeddings"]},"targetHandle":{"fieldName":"embedding","id":"AstraVectorStoreComponent-owRb1","inputTypes":["Embeddings","dict"],"type":"other"}},"id":"reactflow__edge-OpenAIEmbeddings-aTa8O{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-aTa8Oœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-AstraVectorStoreComponent-owRb1{œfieldNameœ:œembeddingœ,œidœ:œAstraVectorStoreComponent-owRb1œ,œinputTypesœ:[œEmbeddingsœ,œdictœ],œtypeœ:œotherœ}","source":"OpenAIEmbeddings-aTa8O","sourceHandle":"{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-aTa8Oœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}","target":"AstraVectorStoreComponent-owRb1","targetHandle":"{œfieldNameœ:œembeddingœ,œidœ:œAstraVectorStoreComponent-owRb1œ,œinputTypesœ:[œEmbeddingsœ,œdictœ],œtypeœ:œotherœ}"},{"className":"","data":{"sourceHandle":{"dataType":"AstraVectorStoreComponent","id":"AstraVectorStoreComponent-owRb1","name":"search_results","output_types":["Data"]},"targetHandle":{"fieldName":"data","id":"ParseData-CYbo1","inputTypes":["Data"],"type":"other"}},"id":"reactflow__edge-AstraVectorStoreComponent-owRb1{œdataTypeœ:œAstraVectorStoreComponentœ,œidœ:œAstraVectorStoreComponent-owRb1œ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-CYbo1{œfieldNameœ:œdataœ,œidœ:œParseData-CYbo1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","source":"AstraVectorStoreComponent-owRb1","sourceHandle":"{œdataTypeœ:œAstraVectorStoreComponentœ,œidœ:œAstraVectorStoreComponent-owRb1œ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-CYbo1","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-CYbo1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"},{"source":"Memory-G8h9c","sourceHandle":"{œdataTypeœ:œMemoryœ,œidœ:œMemory-G8h9cœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-RMzEB","targetHandle":"{œfieldNameœ:œhistoryœ,œidœ:œPrompt-RMzEBœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"history","id":"Prompt-RMzEB","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"Memory","id":"Memory-G8h9c","name":"messages_text","output_types":["Message"]}},"id":"reactflow__edge-Memory-G8h9c{œdataTypeœ:œMemoryœ,œidœ:œMemory-G8h9cœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-RMzEB{œfieldNameœ:œhistoryœ,œidœ:œPrompt-RMzEBœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"ParseData-CYbo1","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-CYbo1œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-RMzEB","targetHandle":"{œfieldNameœ:œcontextœ,œidœ:œPrompt-RMzEBœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"context","id":"Prompt-RMzEB","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-CYbo1","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-CYbo1{œdataTypeœ:œParseDataœ,œidœ:œParseData-CYbo1œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-RMzEB{œfieldNameœ:œcontextœ,œidœ:œPrompt-RMzEBœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"Prompt-RMzEB","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-RMzEBœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-5ZxLf","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-5ZxLfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"CustomComponent-5ZxLf","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-RMzEB","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-RMzEB{œdataTypeœ:œPromptœ,œidœ:œPrompt-RMzEBœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-5ZxLf{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-5ZxLfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"CustomComponent-5ZxLf","sourceHandle":"{œdataTypeœ:œOpenAIModelœ,œidœ:œCustomComponent-5ZxLfœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"TextOutput-OqipT","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-OqipTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"TextOutput-OqipT","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"OpenAIModel","id":"CustomComponent-5ZxLf","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-CustomComponent-5ZxLf{œdataTypeœ:œOpenAIModelœ,œidœ:œCustomComponent-5ZxLfœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-TextOutput-OqipT{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-OqipTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"ChatInput-azS66","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-azS66œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-PgMWw","targetHandle":"{œfieldNameœ:œuser_questionœ,œidœ:œCustomComponent-PgMWwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"user_question","id":"CustomComponent-PgMWw","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-azS66","name":"message","output_types":["Message"]}},"id":"reactflow__edge-ChatInput-azS66{œdataTypeœ:œChatInputœ,œidœ:œChatInput-azS66œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-PgMWw{œfieldNameœ:œuser_questionœ,œidœ:œCustomComponent-PgMWwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"TextInput-ocdhC","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-ocdhCœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-PgMWw","targetHandle":"{œfieldNameœ:œuserœ,œidœ:œCustomComponent-PgMWwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"user","id":"CustomComponent-PgMWw","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-ocdhC","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-ocdhC{œdataTypeœ:œTextInputœ,œidœ:œTextInput-ocdhCœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-PgMWw{œfieldNameœ:œuserœ,œidœ:œCustomComponent-PgMWwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"CustomComponent-5ZxLf","sourceHandle":"{œdataTypeœ:œOpenAIModelœ,œidœ:œCustomComponent-5ZxLfœ,œnameœ:œmetadata_outputœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-PgMWw","targetHandle":"{œfieldNameœ:œllm_responseœ,œidœ:œCustomComponent-PgMWwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"llm_response","id":"CustomComponent-PgMWw","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"OpenAIModel","id":"CustomComponent-5ZxLf","name":"metadata_output","output_types":["Message"]}},"id":"reactflow__edge-CustomComponent-5ZxLf{œdataTypeœ:œOpenAIModelœ,œidœ:œCustomComponent-5ZxLfœ,œnameœ:œmetadata_outputœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-PgMWw{œfieldNameœ:œllm_responseœ,œidœ:œCustomComponent-PgMWwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"CustomComponent-PgMWw","sourceHandle":"{œdataTypeœ:œPulsar Messageœ,œidœ:œCustomComponent-PgMWwœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-Ic87d","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-Ic87dœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"CustomComponent-Ic87d","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Pulsar Message","id":"CustomComponent-PgMWw","name":"text","output_types":["Message"]}},"id":"reactflow__edge-CustomComponent-PgMWw{œdataTypeœ:œPulsar Messageœ,œidœ:œCustomComponent-PgMWwœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-Ic87d{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-Ic87dœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"CustomComponent-Ic87d","sourceHandle":"{œdataTypeœ:œPulsar Producerœ,œidœ:œCustomComponent-Ic87dœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}","target":"ChatOutput-y4wko","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-y4wkoœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-y4wko","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Pulsar Producer","id":"CustomComponent-Ic87d","name":"output","output_types":["Message"]}},"id":"reactflow__edge-CustomComponent-Ic87d{œdataTypeœ:œPulsar Producerœ,œidœ:œCustomComponent-Ic87dœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-y4wko{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-y4wkoœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""}],"viewport":{"x":-959.119312122948,"y":120.7563211983638,"zoom":0.45984027210078166}},"description":"","name":"RAG to Astra Streaming","last_tested_version":"1.0.18","endpoint_name":null,"is_component":false}